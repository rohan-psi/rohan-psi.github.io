{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","stripe","useStripe","useState","paymentRequest","setPaymentRequest","handlePaymentMethodReceived","event","a","paymentDetails","payment_method","paymentMethod","id","shipping","name","shippingAddress","recipient","phone","address","line1","addressLine","city","postal_code","postalCode","state","region","country","fetch","method","headers","body","JSON","stringify","then","res","json","response","error","console","log","complete","confirmCardPayment","paymentIntent","client_secret","status","history","push","warn","useEffect","pr","currency","total","label","amount","requestPayerName","requestPayerEmail","requestShipping","shippingOptions","detail","canMakePayment","result","on","options","Boolean","window","location","hostname","match","stripePromise","loadStripe","process","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,qJCkG5BC,EA1FH,SAAAC,GACV,IAAMC,EAASC,sBADI,EAEyBC,mBAAS,MAFlC,mBAEZC,EAFY,KAEIC,EAFJ,KAGbC,EAA2B,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAE5BC,EAAiB,CACrBC,eAAgBH,EAAMI,cAAcC,GACpCC,SAAU,CACRC,KAAMP,EAAMQ,gBAAgBC,UAC5BC,MAAOV,EAAMQ,gBAAgBE,MAC7BC,QAAS,CACPC,MAAOZ,EAAMQ,gBAAgBK,YAAY,GACzCC,KAAMd,EAAMQ,gBAAgBM,KAC5BC,YAAaf,EAAMQ,gBAAgBQ,WACnCC,MAAOjB,EAAMQ,gBAAgBU,OAC7BC,QAASnB,EAAMQ,gBAAgBW,WAZH,SAgBXC,MAAM,4CAA6C,CACxEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEvB,qBACtBwB,MAAK,SAAAC,GACN,OAAOA,EAAIC,UAvBqB,YAgB5BC,EAhB4B,QAyBrBC,MAzBqB,gBA2BhCC,QAAQC,IAAIH,EAASC,OACrB9B,EAAMiC,SAAS,QA5BiB,8BAgChCjC,EAAMiC,SAAS,WAhCiB,UAkCOvC,EAAOwC,mBAC5CL,EAASM,cAAcC,eAnCO,oBAkCxBN,EAlCwB,EAkCxBA,MAAOK,EAlCiB,EAkCjBA,eAGXL,EArC4B,wBAsC9BC,QAAQC,IAAIF,GAtCkB,2BAyCH,cAAzBK,EAAcE,OAChB5C,EAAM6C,QAAQC,KAAK,YAEnBR,QAAQS,KAAR,6BACwBL,EAAcE,OADtC,gBACoDF,IA7CtB,4CAAH,sDAiFjC,OA/BAM,qBAAU,WACR,GAAI/C,EAAQ,CACV,IAAMgD,EAAKhD,EAAOG,eAAe,CAC/BsB,QAAS,KACTwB,SAAU,MACVC,MAAO,CACLC,MAAO,aACPC,OAAQ,MAEVC,kBAAkB,EAClBC,mBAAmB,EACnBC,iBAAiB,EACjBC,gBAAiB,CACf,CACE7C,GAAI,kBACJwC,MAAO,kBACPM,OAAQ,yBACRL,OAAQ,QAKdJ,EAAGU,iBAAiB1B,MAAK,SAAA2B,GACnBA,IACFX,EAAGY,GAAG,gBAAiBvD,GACvBD,EAAkB4C,UAIvB,CAAChD,IAEAG,EACK,kBAAC,8BAAD,CAA6B0D,QAAS,CAAE1D,oBAE1C,8CCnFW2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXAC,EAAgBC,YAAWC,+GACjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CAAUxE,OAAQmE,GAChB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLC,QAAQD,MAAMA,EAAM6C,c","file":"static/js/main.403996ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  PaymentRequestButtonElement,\n  useStripe\n} from '@stripe/react-stripe-js';\n\nconst App = props => {\n  const stripe = useStripe();\n  const [paymentRequest, setPaymentRequest] = useState(null);\n  const handlePaymentMethodReceived = async event => {\n    // Send the payment details to our function.\n    const paymentDetails = {\n      payment_method: event.paymentMethod.id,\n      shipping: {\n        name: event.shippingAddress.recipient,\n        phone: event.shippingAddress.phone,\n        address: {\n          line1: event.shippingAddress.addressLine[0],\n          city: event.shippingAddress.city,\n          postal_code: event.shippingAddress.postalCode,\n          state: event.shippingAddress.region,\n          country: event.shippingAddress.country\n        }\n      }\n    };\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ paymentDetails })\n    }).then(res => {\n      return res.json();\n    });\n    if (response.error) {\n      // Report to the browser that the payment failed.\n      console.log(response.error);\n      event.complete('fail');\n    } else {\n      // Report to the browser that the confirmation was successful, prompting\n      // it to close the browser payment method collection interface.\n      event.complete('success');\n      // Let Stripe.js handle the rest of the payment flow, including 3D Secure if needed.\n      const { error, paymentIntent } = await stripe.confirmCardPayment(\n        response.paymentIntent.client_secret\n      );\n      if (error) {\n        console.log(error);\n        return;\n      }\n      if (paymentIntent.status === 'succeeded') {\n        props.history.push('/success');\n      } else {\n        console.warn(\n          `Unexpected status: ${paymentIntent.status} for ${paymentIntent}`\n        );\n      }\n    }\n  };\n  useEffect(() => {\n    if (stripe) {\n      const pr = stripe.paymentRequest({\n        country: 'US',\n        currency: 'usd',\n        total: {\n          label: 'Demo total',\n          amount: 1350\n        },\n        requestPayerName: true,\n        requestPayerEmail: true,\n        requestShipping: true,\n        shippingOptions: [\n          {\n            id: 'standard-global',\n            label: 'Global shipping',\n            detail: 'Arrives in 5 to 7 days',\n            amount: 350\n          }\n        ]\n      });\n      // Check the availability of the Payment Request API first.\n      pr.canMakePayment().then(result => {\n        if (result) {\n          pr.on('paymentmethod', handlePaymentMethodReceived);\n          setPaymentRequest(pr);\n        }\n      });\n    }\n  }, [stripe]);\n\n  if (paymentRequest) {\n    return <PaymentRequestButtonElement options={{ paymentRequest }} />;\n  }\n  return 'Insert your form or button component here.';\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\nReactDOM.render(\n  <React.StrictMode>\n    <Elements stripe={stripePromise}>\n      <App />\n    </Elements>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}